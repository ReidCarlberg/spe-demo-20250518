// filepath: c:\Users\carlb\vscodelive\my-vite-app\src\pages\PageOne.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { speService } from '../speService';
import { useAuth } from '../AuthContext';
import '../styles/search-modal.css';
import '../styles/search-page.css';
import '../styles/auth.css';
import './PageOne.css';

// Function to format search result summaries with custom tags
const formatSummary = (summary) => {
  if (!summary) return '';
  
  // Handle <c0> highlight tags (for search terms)
  let formattedSummary = summary.replace(/<c0>(.*?)<\/c0>/g, '<span class="highlight-term">$1</span>');
  
  // Handle <ddd/> truncation marks
  formattedSummary = formattedSummary.replace(/<ddd\/>/g, '<span class="truncation-mark">...</span>');
  
  return formattedSummary;
};

const PageOne = () => {
  const [searchQuery, setSearchQuery] = useState('');
  // Set default to 'term' mode
  const [searchMode] = useState('term');
  const [fields] = useState('');
  const { accessToken, login } = useAuth();
  // Set default to only driveItem (Files)
  const [entities] = useState({
    drive: false,
    driveItem: true
  });
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [searchError, setSearchError] = useState(null);

  const getEntityTypes = () => {
    return ['driveItem']; // Always return driveItem as we've removed the options
  };
  
  const handleSearch = async (e) => {
    if (e) {
      e.preventDefault();
    }
    
    if (!searchQuery.trim()) return;
    
    setIsLoading(true);
    setSearchError(null);
    setResults(null);
    
    try {
      const searchResults = await speService.advancedSearch({
        entityTypes: ['driveItem'],
        query: searchQuery,
        mode: 'term',
        fields: []
      });
      
      setResults(searchResults);
    } catch (err) {
      console.error('Search error:', err);
      setSearchError(err.message || 'An error occurred while performing the search');
    } finally {
      setIsLoading(false);
    }
  };

  const handleLoginClick = () => {
    login();
  };

  const renderResults = () => {
    if (isLoading) {
      return (
        <div className="search-loading">
          <div className="spinner"></div>
          <div>Searching...</div>
        </div>
      );
    }

    if (searchError) {
      return (
        <div className="search-error">
          {searchError}
        </div>
      );
    }

    if (!results) return null;

    if (!results.value?.[0]?.hitsContainers?.length) {
      return (
        <div className="no-results">
          No results found for "{searchQuery}"
        </div>
      );
    }

    return (
      <div className="search-results-container">
        {results.value[0].hitsContainers.map((container, containerIndex) => (
          <div key={containerIndex} className="hits-container">
            {container.hits.map((hit, hitIndex) => {
              // Get the resource so we can access all properties
              const resource = hit.resource;
              if (!resource) return null;
              
              // Format the display of the search result based on entity type
              const title = resource.name || resource.displayName || 'Untitled';
              const summary = hit.summary ? formatSummary(hit.summary) : '';
              const date = resource.lastModifiedDateTime ? new Date(resource.lastModifiedDateTime).toLocaleDateString() : '';
              const previewUrl = resource.webUrl || '';
              
              // For driveItems (files)
              const isFolder = resource.folder || (resource.contentClass === 'folder');
              const itemType = isFolder ? 'Folder' : (resource.file?.mimeType || '');
              const fileExtension = resource.name ? resource.name.split('.').pop().toLowerCase() : '';
              
              // Get containerId and itemId for navigation
              const containerId = resource.parentReference?.driveId || '';
              const itemId = resource.id || '';
              
              return (
                <div key={hitIndex} className="search-result-item">
                  <div className="search-result-header">
                    {/* Item Icon */}
                    <div className="search-result-icon">
                      <i className={`fas ${isFolder ? 'fa-folder' : 'fa-file'}`}></i>
                    </div>
                    
                    {/* Title with link */}
                    <h3 className="search-result-title">
                      {containerId && itemId ? (
                        <Link to={`/preview/${containerId}/${itemId}`}>
                          {title}
                        </Link>
                      ) : (
                        <span>{title}</span>
                      )}
                    </h3>
                  </div>
                  
                  {/* Summary with highlighted terms */}
                  {summary && (
                    <div 
                      className="search-result-summary" 
                      dangerouslySetInnerHTML={{ __html: summary }}
                    />
                  )}
                  
                  {/* Metadata row */}
                  <div className="search-result-meta">
                    {date && (
                      <span className="search-result-date">
                        <i className="fas fa-calendar-alt"></i> {date}
                      </span>
                    )}
                    {itemType && (
                      <span className="search-result-type">
                        <i className="fas fa-file-alt"></i> {itemType}
                      </span>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        ))}
      </div>
    );
  };

  // Content to show when user is logged in (search functionality)
  const renderSearchContent = () => {
    return (
      <>
        <div>
          <input
            type="text"
            className="search-input"
            placeholder="Search for files and content..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            aria-label="Search query"
            style={{ 
              width: '100%', 
              padding: '12px 16px', 
              marginBottom: '10px', 
              boxSizing: 'border-box',
              fontSize: '16px',
              border: '2px solid #333',
              borderRadius: '4px',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
              backgroundColor: '#ffffff',
              color: '#000000'
            }}
          />
          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
            <button 
              onClick={handleSearch}
              type="button" 
              style={{ 
                backgroundColor: '#0078d4',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                padding: '8px 16px',
                cursor: 'pointer',
                fontSize: '16px',
                fontWeight: '500',
                display: 'flex',
                alignItems: 'center'
              }}
            >
              <i className="fas fa-search"></i>&nbsp;Search
            </button>
          </div>
        </div>
        
        {renderResults()}
      </>
    );
  };

  // Content to show when user is not logged in (login form)
  const renderLoginContent = () => {
    return (
      <div className="login-card">
        <h1>SharePoint Embedded</h1>
        <p className="login-subtitle">Sign in to get started.</p>
        
        <button 
          className="login-button" 
          onClick={handleLoginClick}
          style={{
            marginTop: '20px',
            padding: '12px',
            backgroundColor: '#0078d4',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            fontWeight: '500',
            fontSize: '16px',
            cursor: 'pointer',
            width: '100%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          Sign in with Microsoft
        </button>
        
        <div className="login-footer" style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>
          <p>This application uses Microsoft Authentication Library (MSAL) for secure sign-in.</p>
          <p>Your credentials are never stored by this application.</p>
        </div>
      </div>
    );
  };

  return (
    <div className="page-container home-container">
      <div className="home-content">
        <h1 className="home-headline">Introducing SharePoint Embedded</h1>
        <p className="home-text">
          SPE is an AI forward platform, the fastest way to build and scale modern apps that manage documents, 
          delivering Copilot AI, Office collaboration, Purview compliance, and a whole lot more, all via easy-to-use APIs.
        </p>
      </div>
      <div className="home-search-container">
        <h2 className="search-section-title">Search Your Content</h2>
        <div className="search-page-content">
          {accessToken ? renderSearchContent() : renderLoginContent()}
        </div>
      </div>
    </div>
  );
};

export default PageOne;
